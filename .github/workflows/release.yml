
#
# This file is part of kt2l.
#
# kt2l is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# kt2l is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kt2l.  If not, see <http://www.gnu.org/licenses/>.
#

name: Release

on:
  workflow_dispatch:
    inputs:
      execute:
        description: 'Execute :documentation:server-zip:container:macosx-aarch64:windows-amd64:deb-amd64:all-others:integration-tests:website:sonarcloud:'
        required: true
        default: ':documentation:server-zip:container:macosx-aarch64:deb-amd64:all-others:integration-tests:website:sonarcloud:'
        type: string
#      create_release:
#        description: 'Create new release version (TBD)'
#        required: true
#        default: false
#        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  hello:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Configuration $EXECUTE"
        env:
          EXECUTE: ${{ inputs.execute }}

  build:
    needs: [hello]
    if:  ${{ contains(inputs.execute, ':deb-amd64:') }} || ${{ contains(inputs.execute, ':macosx-aarch64:') }} || ${{ contains(inputs.execute, ':windows-amd64:') }} || ${{ contains(inputs.execute, ':all-others:') }} || ${{ contains(inputs.execute, ':integration-tests:') }} || ${{ contains(inputs.execute, ':sonarcloud:') }} || ${{ contains(inputs.execute, ':server-zip:') }} || ${{ contains(inputs.execute, ':container:') }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: mhus-commons
        run: |
          if [ $(cat pom.xml|grep mhus-common.version|grep -c SNAPSHOT) -eq 1 ]; then
            echo "Build mhus-commons"
            echo "================"
            git clone https://github.com/mhus/mhus-commons.git
            cd mhus-commons
            mvn clean install -B -U || exit 1
            cd ..
            rm -rf mhus-commons
          fi
#      - name: vis-network-vaadin
#        run: |
#          echo "Build vis-network-vaadin"
#          echo "================"
#          git clone https://github.com/mhus/vis-network-vaadin.git
#          cd vis-network-vaadin
#          mvn clean install -B -Pproduction || exit 1
#          cd ..
#          rm -rf vis-network-vaadin
#      - name: vaadin-raw-xterm-addon
#        run: |
#          echo "Build vaadin-raw-xterm-addon"
#          echo "================"
#          git clone https://github.com/mhus/vaadin-raw-xterm-addon.git
#          cd vaadin-raw-xterm-addon
#          mvn clean install -B -Pproduction || exit 1
#          cd ..
#          rm -rf vaadin-raw-xterm-addon
      - name: markdown-page-generator-plugin
        run: |
          echo "Build markdown-page-generator-plugin"
          echo "================"
          git clone https://github.com/walokra/markdown-page-generator-plugin.git
          cd markdown-page-generator-plugin
          mvn clean install -B || exit 1
          cd ..
          rm -rf markdown-page-generator-plugin
      - name: Prepare
        run: ./kt2l-desktop/launcher/prepare.sh
      - name: Build maven linux-amd64
        run: mvn clean install -B -Plinux-amd64 -Pdeploy -Pproduction -Ppreview -Dspring.profiles.active=prod -Dvaadin.force.production.build=true
      - name: Build maven macosx-aarch64
        if:  ${{ contains(inputs.execute, ':macosx-aarch64:') }}
        run: cd kt2l-desktop;mvn install -B -Pmacosx-aarch64 -Pdeploy -Pproduction -Ppreview -Dspring.profiles.active=prod -Dvaadin.force.production.build=true
      - name: Build maven macosx-x86_64
        if:  ${{ contains(inputs.execute, ':all-others:') }}
        run: cd kt2l-desktop;mvn install -B -Pmacosx-x86_64 -Pdeploy -Pproduction -Ppreview -Dspring.profiles.active=prod -Dvaadin.force.production.build=true
      - name: Build maven windows-amd64
        if:  ${{ contains(inputs.execute, ':windows-amd64:') }}
        run: cd kt2l-desktop;mvn install -B -Pwindows-amd64 -Pdeploy -Pproduction -Ppreview -Dspring.profiles.active=prod -Dvaadin.force.production.build=true
      - name: Integration Tests
        if:  ${{ contains(inputs.execute, ':integration-tests:') }}
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          mvn -B verify -Pdeploy -Pproduction -Ppreview -Pintegration_tests -Dspring.profiles.active=prod -Dvaadin.force.production.build=true
        env:
          TEST_DEBUG: false
          TEST_SCREENSHOTS: true
      - name: Copy Screenshots
        if:  ${{ contains(inputs.execute, ':integration-tests:') }}
        run: |
          cd kt2l-test/target/screenshots
          rm ../../../docs/screenshots/*.png
          cp *.png ../../../docs/screenshots/
          echo "<html><body><h1>Screenshots</h1>" > ../../../docs/screenshots/index.html
          for f in *.png; do  
            echo "Copy $f to docs"
            echo "<h2>$f</h2><img width='100%' src='$f'>" >> ../../../docs/screenshots/index.html
          done
          echo "</body></html>" >> ../../../docs/screenshots/index.html
      - name: Analyse
        if:  ${{ contains(inputs.execute, ':sonarcloud:') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mhus_kt2l -Plinux-amd64 -Pdeploy -Pproduction -Dspring.profiles.active=prod
      - name: Commit maybe changes to git
        run: |
          git config --global user.name 'Robot'
          git config --global user.email 'mhus@users.noreply.github.com'
          git checkout -b build/${{ github.run_id }}
          git pull
          git add docs/screenshots
          git add kt2l-core/src/main/java
          git add kt2l-desktop/src/main/java
          git add kt2l-server/src/main/java
          git add kt2l-test/src/main/java
          git commit -am "Build ${{ github.run_id }}" || true
          git push --set-upstream origin build/${{ github.run_id }} || true
          gh pr create --title "Release Build ${{ github.run_id }}" --body "Release Build ${{ github.run_id }}" --base main --head build/${{ github.run_id }} || true
      - name: Build Server ZIP
        run: ./kt2l-server/launcher/create-zip.sh
      - name: Build Server Container
        if:  ${{ contains(inputs.execute, ':container:') }}
        run: ./kt2l-server/launcher/create-container.sh
      - name: Deploy Server ZIP
        if:  ${{ contains(inputs.execute, ':server-zip:') }}
        run: ./kt2l-server/launcher/deploy-zip.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
      - name: Deploy Desktop Jars
        run: ./kt2l-desktop/launcher/deploy-jars.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
      - name: Deploy Server Container
        run: ./kt2l-server/launcher/deploy-container.sh
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

  deb-amd64:
    if:  ${{ contains(inputs.execute, ':deb-amd64:') }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download Binaries
        run: |
          echo "Download kt2l-desktop.jar from cache"
          mkdir -p kt2l-desktop/target
          cd kt2l-desktop/target
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-linux-amd64.jar kt2l-desktop-linux-amd64.jar --quiet || exit 1
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-linux-amd64.txt kt2l-desktop-linux-amd64.txt --quiet || exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
      - name: Create Desktop Bundle
        run: ./kt2l-desktop/launcher/create-deb-amd64.sh
      - name: Deploy Desktop Bundle
        run: ./kt2l-desktop/launcher/deploy-deb-amd64.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
  macosx-aarch64:
    needs: build
    if:  ${{ contains(inputs.execute, ':macosx-aarch64:') }}
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download Binaries
        run: |
          echo "Download kt2l-desktop.jar from cache"
          mkdir -p kt2l-desktop/target
          cd kt2l-desktop/target
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-macosx-aarch64.jar kt2l-desktop-macosx-aarch64.jar --quiet || exit 1
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-macosx-aarch64.txt kt2l-desktop-macosx-aarch64.txt --quiet || exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
      - name: Create Desktop Bundle
        run: ./kt2l-desktop/launcher/create-macosx-aarch64.sh
      - name: Deploy Desktop Bundle
        run: ./kt2l-desktop/launcher/deploy-macosx-aarch64.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

  windows-amd64:
    if: ${{ contains(inputs.execute, ':windows-amd64:') }}
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download Binaries
        shell: bash
        run: |
          echo "Download Binaries from cache"
          mkdir -p kt2l-desktop/target
          cd kt2l-desktop/target
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-windows-amd64.jar kt2l-desktop-windows-amd64.jar --quiet || exit 1
          aws s3 cp s3://kt2l-downloads/cache/kt2l-desktop-windows-amd64.txt kt2l-desktop-windows-amd64.txt --quiet || exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
      - name: create Windows desktop bundle
        shell: cmd
        run: kt2l-desktop/launcher/create-windows-amd64.bat
      - name: Deploy Windows desktop bundle
        shell: bash
        run: ./kt2l-desktop/launcher/deploy-windows-amd64.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}

  documentation:
    if:  ${{ contains(inputs.execute, ':documentation:') }}
    permissions: write-all
    runs-on: ubuntu-latest
    concurrency:
      group: deploy_page
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: 'maven'
#      - name: Generate Javadoc
#        run: mvn javadoc:aggregate -DskipTests

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - run: cd docs && npm ci
      - run: cd docs && npm run build
      #      - run: cp -R target/site/apidocs docs/build/
      - name: Setup gh-pages
        run: git clone https://github.com/mhus/kt2l.git -b gh-pages gh-pages
      - name: Copy content
        run: cd gh-pages/docs; rm -rf docs;cp -r ../../docs/build docs
      - name: prepare git config
        run: |
          cd gh-pages
          pwd
          echo "[gc]" >> .git/config
          echo "	auto = 0" >> .git/config
          echo "[http \"https://github.com/\"]" >> .git/config
          cat ../.git/config|grep "extraheader" >> .git/config
      - run: date > gh-pages/docs/docs/lastupdate.txt
      - name: commit
        run: |
          set -x
          cd gh-pages
          git add docs/docs
          git config --global user.name 'Robot'
          git config --global user.email 'mhus@users.noreply.github.com'
          git commit -m "Update docs"
          git push

  website:
    needs: [macosx-aarch64, windows-amd64, deb-amd64, documentation]
    if: ${{ always() && contains(inputs.execute, ':website:') }}
    runs-on: ubuntu-latest
    steps:
      - run: |
         curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $WORKFLOW_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/mhus/kt2l/actions/workflows/website.yml/dispatches \
            -d '{"ref":"gh-pages"}'
        env:
            WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}