"use strict";(self.webpackChunkKT2L=self.webpackChunkKT2L||[]).push([[7153],{4058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var o=t(5893),i=t(1151);const r={},c=void 0,s={id:"contribute/configuration",title:"configuration",description:"Using Configurations",source:"@site/docs/contribute/configuration.md",sourceDirName:"contribute",slug:"/contribute/configuration",permalink:"/docs/contribute/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/mhus/kt2l/blob/main/docs/docs/contribute/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Resource Actions",permalink:"/docs/contribute/resource-action"},next:{title:"Contribute",permalink:"/docs/contribute"}},a={},u=[{value:"Using Configurations",id:"using-configurations",level:2},{value:"Create custom Configuration services",id:"create-custom-configuration-services",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"using-configurations",children:"Using Configurations"}),"\n",(0,o.jsxs)(n.p,{children:["Configurations are services in KT2L. To use a configuration\nsimply Autowire the ",(0,o.jsx)(n.code,{children:"ConfigurationService"})," and call the ",(0,o.jsx)(n.code,{children:"get"})," methods."]}),"\n",(0,o.jsx)(n.p,{children:"There are two types of configurations. A single static configuration and user related configurations.\nThe user configurations are looked up also in the user directories. If the configuration is not protected\nthe user can overwrite the configuration in its own home directory."}),"\n",(0,o.jsxs)(n.p,{children:["Static configurations are stored in the ",(0,o.jsx)(n.code,{children:"config"})," directory of the KT2L installation."]}),"\n",(0,o.jsxs)(n.p,{children:["The user is read from the vaadin UI variable. In some cases this is not available. In this case you need\nto remember the ConfigurationContext calling the static method ",(0,o.jsx)(n.code,{children:"ConfigurationContext.getContext()"})," and\nencapsulate the code with a try use block."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"final var cc = ConfigurationContext.getContext();\nThread.newVirtualThread(() -> {\n    try (var cce = cc.enter()) {\n        // your code here ...\n    }\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"create-custom-configuration-services",children:"Create custom Configuration services"}),"\n",(0,o.jsxs)(n.p,{children:["To create a custom configuration service you need to extend the ",(0,o.jsx)(n.code,{children:"AbstractUserRelatedConfig"})," or ",(0,o.jsx)(n.code,{children:"AbstractSingleConfig"})," base class. Call the\nconstructor with the basename of the configuration file and use ",(0,o.jsx)(n.code,{children:"config()"})," to get the base node of the configuration each time you access a\nconfiguration parameter. The ",(0,o.jsx)(n.code,{children:"config()"})," method is getting the configuration from current the user each time you call it. The method has caching\nimplemented so you can call it as often as you like."]})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>c});var o=t(7294);const i={},r=o.createContext(i);function c(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);