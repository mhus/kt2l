#
# kt2l-server - kt2l as server
# Copyright Â© 2024 Mike Hummel (mh@mhus.de)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: kt2l
---
apiVersion: v1
kind: Secret
metadata:
  name: passwords
  namespace: kt2l
data:
  # 2UKowq7JszoxAzfSvcCKRTpD4Cb
  admin_password: MlVLb3dxN0pzem94QXpmU3ZjQ0tSVHBENENiCg==
  # ov7yV9EzZRMp65ZHaurPRYy2PwD
  user_password: b3Y3eVY5RXpaUk1wNjVaSGF1clBSWXkyUHdECg==
  # tvanR3WHokmAexboBeaqGm6LVub
  viewer_password: dHZhblIzV0hva21BZXhib0JlYXFHbTZMVnViCg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-config
  namespace: kt2l
data:
    # kt2l-users
    login.yaml: |
      autoLogin: false
      autoLoginUser: nouser
      protectedConfigurations:
    users.yaml: |
      users:
        - name: "admin"
          password: "{env}admin_password"
          roles:
            - "READ"
            - "WRITE"
            - "LOCAL"
            - "SETTINGS"
            - "ADMIN"
        - name: "user"
          password: "{env}user_password"
          roles:
          - "READ"
          - "WRITE"
          - "SETTINGS"
        - name: "viewer"
          password: "{env}viewer_password"
          roles:
            - "READ"
    clusters.yaml: |
        defaultCluster: .local-cluster
        defaultResourceType: "pods"
        defaultNamespace: default
        clusters:
            - name: .local-cluster
              title: "This"
              enabled: true
              color: blue
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: kt2l-cluster-role
rules:
  - apiGroups: ["", "metrics.k8s.io","apps","batch","extensions","networking.k8s.io","storage.k8s.io","rbac.authorization.k8s.io","autoscaling","policy", "events.k8s.io"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kt2l-service-account
  namespace: kt2l
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kt2l-cluster-role-binding
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kt2l-cluster-role
subjects:
    - kind: ServiceAccount
      name: kt2l-service-account
      namespace: kt2l
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kt2l
  name: kt2l
  namespace: kt2l
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kt2l
  template:
    metadata:
      labels:
        app: kt2l
    spec:
      serviceAccountName: kt2l-service-account
      containers:
        - image: mhus/kt2l-server:snapshot
          imagePullPolicy: Always
          name: kt2l-server
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: KT2L_UNSECURE
              value: 'false'
          envFrom:
            - secretRef:
                name: passwords
          volumeMounts:
            - name: config
              mountPath: /app/kt2l-server/config/local
          livenessProbe:
            failureThreshold: 60
            httpGet:
              path: /actuator/health/liveness
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: local-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kt2l
  name: kt2l
  namespace: kt2l
spec:
    ports:
      - name: http
        port: 80
        targetPort: 8080
    selector:
        app: kt2l
    type: ClusterIP
